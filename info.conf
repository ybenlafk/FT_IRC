<--------------------------------------------------- poll syscall ----------------------------------------------------->

At a low level, the poll system call interacts directly with the operating system's kernel to monitor file descriptors for events.
Here's a simplified overview of the steps involved:

The program prepares a data structure called struct pollfd for each file descriptor it wants to monitor. 
This structure typically includes the following fields:

fd: The file descriptor to monitor.
events: The events the program is interested in, specified as a bitmask. For example, POLLIN for read availability, 
POLLOUT for write availability, and POLLERR for exceptional conditions.
revents: Upon return, this field is filled by the kernel to indicate the events that occurred for the corresponding file descriptor.
The program assembles an array of struct pollfd structures, representing all the file descriptors it wants to monitor.

The program invokes the poll system call by passing the array of struct pollfd structures, along with the number of structures in the array, as arguments.

The CPU transitions from user mode to kernel mode, and the operating system's kernel takes control.

The kernel examines the file descriptors specified in the struct pollfd array and determines whether any of them have the requested events.

If none of the file descriptors have the requested events, the kernel puts the calling process to sleep until an event occurs on one of the monitored file descriptors.

When an event occurs on a file descriptor (e.g., data becomes available for reading), 
the kernel updates the revents field of the corresponding struct pollfd structure to indicate the events that occurred.

The kernel wakes up the calling process by returning from the poll system call.

The program inspects the revents field of each struct pollfd structure to determine which file descriptors had events and takes appropriate actions accordingly.

The program can repeat the poll system call to continue monitoring file descriptors for events.

The poll system call provides a way for programs to efficiently monitor multiple file descriptors without resorting to blocking on individual descriptors or using busy-waiting techniques. 
It allows programs to wait for events and handle them as they occur, enabling event-driven programming.

<--------------------------------------------------- socket syscall ----------------------------------------------------->

The socket system call is a low-level function provided by operating systems to create a new network socket.
It allows programs to establish network connections and communicate over the network. Here's a simplified explanation of how the socket system call works at a low level:

The program prepares a data structure called struct sockaddr that contains the network address information for the socket. 
This structure typically includes the address family (e.g., IPv4 or IPv6), the IP address, and the port number.

The program invokes the socket system call, passing the address family and socket type as arguments. 
For example, AF_INET for IPv4 and SOCK_STREAM for a TCP socket.

The CPU transitions from user mode to kernel mode, and the operating system's kernel takes control.

The kernel verifies the arguments and allocates memory and other resources for the new socket.

The kernel assigns a file descriptor to the socket, which serves as a handle for the program to refer to the socket in subsequent operations.

The kernel initializes internal data structures to manage the socket's state, buffers, and other properties.

The kernel returns the file descriptor to the calling program, indicating the successful creation of the socket.

The program can use the returned file descriptor to perform various operations on the socket, such as sending and receiving data, 
setting socket options, and connecting to remote hosts.

When the program is finished with the socket, it can close the socket by invoking the close system call, passing the file descriptor as an argument.
 This releases the associated resources and frees the file descriptor for reuse.